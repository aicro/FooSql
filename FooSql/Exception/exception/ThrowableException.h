/// @file ThrowableException.h
/// @brief The file defines a class, the instance of which can be thrown and caught by the user.

/// @author Aciro Ai
/// @date 2015/2/19

#ifndef COMMON_EXCEPTION_THROWABLE_EXCEPTION_H_
#define COMMON_EXCEPTION_THROWABLE_EXCEPTION_H_

#include <tr1/memory>
#include <string>
#include <sstream>
#include <vector>

using namespace std;

namespace COMMON
{
	namespace EXCEPTION
	{
        class IException;
    
		/// @brief a class that can be thrown and caught by the user.
		/// The whole frame will use this class as the only thrownable exception class.
		/// The class is just a wrapper for the inner exception, which are the real exceptions
		/// generated by the under codes.
		class ThrowableException
		{
		protected:
			vector<tr1::shared_ptr<IException> > exceptions_;

		public:
            /// @brief Default constructor
            ThrowableException();
        
            /// @brief Constructor
            /// @param other the point to the instance to be thrown
            ThrowableException(const ThrowableException* other);

            /// @brief Copy constructor
            /// @param other Object to be thrown out.
            ThrowableException(ThrowableException& other);

			/// @brief Constructor
			/// @param in A list of exceptions to be thrown out.
			ThrowableException(vector<tr1::shared_ptr<IException> >& in);

			/// @brief Constructor
			/// @param in A point to the real exception
			ThrowableException(tr1::shared_ptr<IException> in);

			virtual ~ThrowableException() {}

			/// @brief Get the detail of the exception thrown out.
			/// @param needDetail Should we output all the detail or conceal some less important message for a short output. 
            /// @return The detail of the exception thrown out.
			virtual std::string What(bool needDetail = false) const;

			/// @brief Get the list of inner exception.
			/// @return the list of inner exception.
			virtual vector<tr1::shared_ptr<IException> >& GetInnerExceptions();

            /// @brief Copy inner exceptions.
            /// @param exps The container for the copy of the inner exceptions.
            void CopyException(const vector<tr1::shared_ptr<IException> >& exps);
		};	
	}
}

#endif